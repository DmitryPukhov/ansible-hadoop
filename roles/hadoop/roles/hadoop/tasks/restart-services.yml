---

- name: restart hdfs namenode
  action: shell {{ hadoop_home }}/sbin/hadoop-daemon.sh  --script hdfs stop namenode; {{ hadoop_home }}/sbin/hadoop-daemon.sh  --script hdfs start namenode
  become: yes
  become_user: '{{hadoop_user}}'
  #when: ( hadoop_type_of_node == 'master' ) or ( hadoop_type_of_node == 'namenode' )

- name: restart hdfs datanode
  action: shell {{ hadoop_home }}/sbin/hadoop-daemon.sh  --script hdfs stop datanode; {{ hadoop_home }}/sbin/hadoop-daemon.sh  --script hdfs start datanode
  become: yes
  become_user: '{{hadoop_user}}'
  #when: ( hadoop_type_of_node == 'slave' ) or ( hadoop_type_of_node == 'datanode' )


- name: restart yarn-resourcemanager
  action: shell {{ hadoop_home }}/sbin/yarn-daemon.sh stop resourcemanager; {{ hadoop_home }}/sbin/yarn-daemon.sh start resourcemanager
  become: yes
  become_user: '{{hadoop_user}}'
  #when: ( hadoop_type_of_node == 'master' ) or ( hadoop_type_of_node == 'resourcemanager' )

- name: restart yarn-nodemanager
  action: shell {{ hadoop_home }}/sbin/yarn-daemon.sh stop nodemanager; {{ hadoop_home }}/sbin/yarn-daemon.sh start nodemanager
  become: yes
  become_user: '{{hadoop_user}}'
  #when: ( hadoop_type_of_node == 'slave' ) or ( hadoop_type_of_node == 'nodemanager' )

#- name: refreshDFSNodes
#  command: "{{ hadoop_home }}/bin/hdfs dfsadmin -refreshNodes"
#  become: yes
#  become_user: '{{hadoop_user}}'
  #when: ( hadoop_type_of_node == 'master' ) or ( hadoop_type_of_node == 'namenode' )
#  ignore_errors: yes

#- name: refreshYarnNodes
#  command: "{{ hadoop_home }}/bin/yarn rmadmin -refreshNodes"
#  become: yes
#  become_user: '{{hadoop_user}}'
  #when: ( hadoop_type_of_node == 'master' ) or ( hadoop_type_of_node == 'resourcemanager' )
#  ignore_errors: yes